It is known that context-free grammars can be extended to generating graphs resulting in graph grammars; one of such fundamental approaches is hyperedge replacement grammars. On the other hand there are type-logical grammars which also serve to describe string languages. In this paper, we investigate how to extend the Lambek calculus (\mathrm{L}) and grammars based on it to graphs. The resulting approach is called hypergraph Lambek calculus (\mathrm{HL}). It is a logical sequential calculus whose sequents are graphs; it naturally extends the Lambek calculus and also allows one to embed its variants (commutative \mathrm{L}, \mathrm{NL\diamondsuit}, \mathrm{L}_{\mathbf{1}}^\ast). Besides, many properties of the Lambek calculus (cut elimination, counters, models) can be lifted to \mathrm{HL}. However, while Lambek grammars are equivalent to context-free grammars in the string case, hypergraph Lambek grammars are much more powerful than hyperedge replacement grammars. Particularly, the former can generate the language of all graphs without isolated nodes; the language of all bipartite graphs; finite intersections of languages generated by hyperedge replacement grammars. Nevertheless, the derivability problem in \mathrm{HL} and the membership problem for grammars based on \mathrm{HL} are NP-complete as well as the membership problem for hyperedge replacement grammars.