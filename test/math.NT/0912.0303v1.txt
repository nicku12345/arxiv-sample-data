A method for computing the n'th decimal digit of pi in O(n^3 log(n)^3) time and with very little memory is presented here. The computation is based on the recently discovered Bailey-Borwein-Plouffe algorithm and the use of a new algorithm that simply splits an ordinary fraction into its components. The algorithm can be used to compute other numbers like zeta(3), pi*sqrt(3), pi^2 and 2/sqrt(5) ln(phi) where phi is the golden ratio. The computation can be achieved without having to compute the preceding digits. I claim that the algorithm has a more theoretical rather than practical interest, I have not found a faster algorithm or proved that it cannot exist.