We present a categorical denotational semantics for a database mapping, based on views, in the most general framework of a database integration/exchange. Developed database category DB, for databases (objects) and view-based mappings (morphisms) between them, is different from Set category: the morphisms (based on a set of complex query computations) are not functions, while the objects are database instances (sets of relations). The logic based schema mappings between databases, usually written in a highly expressive logical language (ex. LAV, GAV, GLAV mappings, or tuple generating dependency) may be functorially translated into this "computation" category DB. A new approach is adopted, based on the behavioral point of view for databases, and behavioral equivalences for databases and their mappings are established. By introduction of view-based observations for databases, which are computations without side-effects, we define a fundamental (Universal algebra) monad with a power-view endofunctor T. The resulting 2-category DB is symmetric, so that any mapping can be represented as an object (database instance) as well, where a higher-level mapping between mappings is a 2-cell morphism. Database category DB has the following properties: it is equal to its dual, complete and cocomplete. Special attention is devoted to practical examples: a query definition, a query rewriting in GAV Database-integration environment, and the fixpoint solution of a canonical data integration model.