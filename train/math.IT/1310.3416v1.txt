In this paper we address the issue of pruning (i.e., shortening) a given interleaver via truncation of the transposition vector of the mother permutation and study its impact on the structural properties of the permutation. This method of pruning allows for continuous un-interrupted data flow regardless of the permutation length since the permutation engine is a buffer whose leading element is swapped by other elements in the queue. The principle goal of pruning is that of construction of variable length and hence delay interleavers with application to iterative soft information processing and concatenated codes, using the same structure (possibly in hardware) of the interleaver and deinterleaver units. We address the issue of how pruning impacts the spread of the permutation and also look at how pruning impacts algebraically constructed permutations. We note that pruning via truncation of the transposition vector of the permutation can have a catastrophic impact on the permutation spread of algebraically constructed permutations. To remedy this problem, we propose a novel lifting method whereby a subset of the points in the permutation map leading to low spread of the pruned permutation are identified and eliminated. Practical realization of this lifting is then proposed via dummy symbol insertion in the input queue of the Finite State Permuter (FSP), and subsequent removal of the dummy symbols at the FSP output.